class Lengthv extends Operator {


static make =  { fun args -> 
	let res = new Lengthv in
	Expression.make res args
} 

(* static parser =  { ((stx_parser "lengthv") .>> (Expression.parser .>>= (fun x -> ret (Lengthv.make [])))) } *)
static parser = { (stx_parser "lengthv") .>>  ret (Lengthv.make []) }


type_scheme = { |() -> 
  let x = TypeVariable.next() in
	FunctionType.make(x,IntType.make())
  (* not x, has to be something like array *)
}

reduce = {  |() -> match this.get_arguments() with 
	| (Cons x args) -> Some (Integer.make (lengthv x) args)
	| _ -> None

}

headString = { |() -> "lengthv" }
with Expression.simpleParser += | view(Lengthv.parser,Parsed ps) -> Parsed ps
}
(* get_result (Expression.parser(0, lexer "lengthv X"));; *)
(* Expression.parse "lengthv x";; *)

