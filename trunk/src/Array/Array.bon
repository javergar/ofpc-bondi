class Array extends Expression {
array_type: ArrayType;
len: Int;
my_array: array Float;


get_arrayLength = {|()-> !this.len}
(*
get_ini_value = {|()-> !(entry(!this.my_array,0))}
*)
get_value = {|(index:Integer)-> !(entry(!this.my_array, index.get_int_value()))}

static make =  {|(ini, leng) ->  
        match (ini, leng) with
        | (i:Floats,l:Integer) ->
	let res = new Array in
	res.my_array = newarray (i.get_float_value())  (l.get_int_value());
	res.len = (leng.get_int_value());
	(Expression.make res []) 
        | _ -> Exception ""
}

static parser ={ 
   ((stx_parser "Array") .>> (Floats.parser )) .>>=
       (fun x -> (Integer.parser) .>>= (fun y -> (ret (Array.make (x,y))))) }  
with Type.parser += | view(Array.parser,Parsed ps) -> Parsed ps


}

