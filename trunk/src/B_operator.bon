class B_operator extends Operator {
type_scheme = { |() -> 
  let x = TypeVariable.next() in 
  QuantifiedType.make ((x.get_variable()),(FunctionType.make (x,x)))
}

static make =  { fun args -> Expression.make (new B_operator) args } 

static parser = { parseUpper "B" (B_operator.make []) }

headString = { |() -> "B" }

with Expression.simpleParser += | view(B_operator.parser,Parsed ps) -> Parsed ps
}
