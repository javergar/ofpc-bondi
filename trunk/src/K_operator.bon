class K_operator extends Operator {
static make =  { fun args -> Expression.make (new K_operator) args } 
static parser = { parseUpper "K" (K_operator.make []) }
type_scheme = { |() -> 
  let x = TypeVariable.next() in 
  let y = TypeVariable.next() in 
  QuantifiedType.make (x.get_variable(),
  (QuantifiedType.make (y.get_variable(),
    FunctionType.make2 (x,y,x) 
)))
}
reduce = { |() -> match this.get_arguments() with 
  | (Cons x (Cons y args)) -> Some (x.apply args)
  | _ -> None
}
headString = { |() -> "K" }
with Expression.simpleParser += | view(K_operator.parser,Parsed ps) -> Parsed ps
}

