class GlobalContext {
declaration_counter : Int;
value_context : DeclarationEnvironment<ExpressionData>;
constructor_context : DeclarationEnvironment<ConstructorData>;
static make = { | () -> 
 let res = new GlobalContext in 
 res.declaration_counter = 1;
 res.value_context = DeclarationEnvironment.make (Exception:ExpressionData);
 res.constructor_context = DeclarationEnvironment.make (Exception:ConstructorData);
res 
}
get_value_context = { | () -> !this.value_context }
set_value_context = { fun x -> this.value_context = x }
get_declaration_counter = { | () -> (!this.declaration_counter) }
increment_declaration_counter = { | () -> this.declaration_counter =  (!this.declaration_counter) + 1 }
}
