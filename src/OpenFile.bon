class OpenFile extends Operator {
(* Making *)
	static make = { fun args -> Expression.make (new OpenFile) args }
(* Parsing *)
	static parser = { (stx_parser "OpenFile") .>> ( ret (OpenFile.make [])) }
	type_scheme = { | () -> FunctionType.make(StringType.make(),SocketType.make()) }	
	reduce = { |() -> match this.get_arguments() with 
	  ((| Cons (x:Strings) args -> Some (SocketExpression.make( openfile (x.get_string_value()) ).apply args)
	  | _ -> None) : List Expression -> Maybe Expression)
	}
(* Typing *)	
	headString = { |() -> "OpenFile" }
	with Expression.simpleParser += | view(OpenFile.parser,Parsed ps) -> Parsed ps
(* Testing 
	let t1 = Expression.parse "OpenFile \"testfile\"";;
	t1.eval();;
*)
}
