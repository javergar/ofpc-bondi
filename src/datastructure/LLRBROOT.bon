
%open "LLRBTREE.bon";;

class BalancedTree<a,b>
{
	root: LLRBTree <a,b>;

	set_root = { fun nm -> this.root = nm }
	get_root = { | ( ) -> !this.root } 

	static make = { ((| (k,v) -> 
		let bt = new BalancedTree<a,b> in
		bt.set_root(LLRBTree.make(k,v,BLACK));
		bt
		): a * b -> BalancedTree <a,b>)
	}

	keys = { |() -> 
		this.get_root().keys()
	}

	size = { |() -> 
		this.get_root().size()
	}
	
	depth = { |() -> 
		this.get_root().depth()
	}

	search = { fun (x:a) -> 
		this.get_root().search x
	}

	insert = { fun (x:a) (y:b) ->
		let bt = this.get_root().insert x y in
		this.set_root(bt)
	}

	with toString += | (h:BalancedTree) -> toString(h.get_root()) 

}

(*
	%open "BT";;

	(*
	let bt1 = Ref (LLRBTree.make(1,2,BLACK));;
	bt1 = (!bt1).insert 2 3;;
	bt1 = (!bt1).insert 3 4;;
	*)

	let bt1 = BalancedTree.make(1,2);;
	bt1.insert 2 2;;
	bt1.insert 3 2;;
	bt1.insert 4 2;;
	bt1.insert 5 2;;


	print "SIZE: \n";;
	bt1.size();;

	print "Keys: \n";;
	bt1.keys();;

	print "Depth: \n";;
	bt1.depth();;

	print "Search 4 \n";;
	bt1.search 4;;


	let bt1 = BalancedTree.make(6,2);;
	bt1.insert 5 2;;
	bt1.insert 4 2;;
	bt1.insert 3 2;;
	bt1.insert 2 2;;


*)
