

let rec (quote: Expression -> Expression) = 
| (op:Operator) -> 
  match op.get_arguments() with ((
  | [] -> op
  | args -> 
	let op1 = Expression.make (clone op) [] in 
	let args1 = map quote args in 
	B_operator.make (Cons op1 args1)
  ): List Expression -> Expression)
| x ->  x
;;



let rec (quote: Expression -> Expression) e = 
match e.factorise() with ((
| None -> e
| Some (e1,e2) ->  
  match e1 with 
  | (op:Operator) -> B_operator.make [(op:Expression),quote e2]
  | _ -> (quote e1).apply [quote e2]
): Maybe (Expression * Expression) -> Expression) 
;;




let unquote = Expression.parse "
let rec unquote = 
| B x -> x
| y x -> (unquote y) (unquote x) 
| I
in 
unquote
"
;;


(*

tests

let parse = Expression.parse;;

let ap x y = x.apply [y];;


let q0 = quote (parse "K");;
let q10 = quote (parse "F S");;
let q1 = quote (parse "F S F");;
let q2 = quote (parse "K S F");;

(ap unquote q0).eval();;
(ap unquote q1).normal();;
(ap unquote q2).eval();;



*)
