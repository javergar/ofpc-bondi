class Boolean extends Expression {

  value: Bool;
  get_value = { | () -> !this.value}

  (* Making *)
  static make = {
    fun x -> let b = new Boolean in
    b.value = x;
    Expression.make b []
  }

  (* Parsing *)
  static parser = {
    (stx_parser "True" .<|> stx_parser "False") .>>= ( fun x ->
       match x with
       | "True" -> ret (Boolean.make True)
       | "False" -> ret (Boolean.make False) )
  }

  (* Typing *)
  infer_type_head =  { ((fun ctxt ty -> Some (BoolType.make())): Context  -> Type -> Maybe Type) }

  (* Printing *)
  headString = { |() -> (toString ( this.get_value() ))
  }
  with Expression.simpleParser += | view(Boolean.parser, Parsed ps) -> Parsed ps


  (* Testing
  
  let parse = Expression.parse;;
  let ctxt0 = Context.make1 (TypeVariable.idSub);;

  parse "True";;
  parse "False";;
  parse "True".infer_type(ctxt0) (TypeVariable.next());;
  parse "False".infer_type(ctxt0) (TypeVariable.next());;

  *)

}
