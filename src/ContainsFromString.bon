class ContainsFromString extends DatumOperator
{	
	static make =  { fun args -> Expression.make (new ContainsFromString) args } 
	

	static parser = { (stx_parser "ContainsFromString") .>> ret (ContainsFromString.make [])}


	(* String -> String *)
	type_scheme = { |() -> 
	  FunctionType.make (StringType.make(),IntType.make())
	}

	reduce = { |() -> match this.get_arguments() with
		((| Cons x (Cons y (Cons z args)) -> match (x,y,z) with 
					|(x:Strings, y:Integer, z:Chars)-> Some (Boolean.make (containsfromstring (x.get_string_value()) (y.get_int_value()) (z.get_char_value())) )
		| _ -> None): List Expression -> Maybe Expression)
	}

	(* Printing *)
	headString = { |() -> "ContainsFromString" }
	with 
	Expression.simpleParser += |view(ContainsFromString.parser,Parsed ps) -> Parsed ps 

	(* Testing 
	let test = Expression.parse "ContainsFromString \"abcdefg\" 2 'c'";;
	test.eval();;
	*)
}
