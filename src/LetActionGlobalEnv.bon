class LetAction extends ShellAction {
var:Expression;
exp:Expression;
get_variable = { | () -> !this.var}
get_expression = { | () -> !this.exp}

static make = { | (x,y) ->
                   let res = new LetAction in
                       res.var =  x;
                       res.exp = y; res
}

static discontinuous parser = { 
let lambdamake  = 
((| (x:ExpressionVariable) -> fun y -> Lambda.make x y []
): Expression -> Expression -> Expression) 
in 
let letmake  = 
((| (x:ExpressionVariable) -> fun y z -> LetExpression.make x y z []
): Expression -> Expression -> Expression -> Expression) 
in 
(stx_parser "let") .>> (
Expression.simpleParser .>>= (fun ident -> 
(parseMany ExpressionVariable.parser) .>>= (fun params ->
(stx_parser "=") .>> (
Expression.parser .>>= (fun exp ->  
(stx_parser "; ;") .>> ( 
ret (LetAction.make(ident,foldright lambdamake params exp))
))))))
}

static discontinuous recursiveParser = { 
let lambdamake  = 
((| (x:ExpressionVariable) -> fun y -> Lambda.make x y []
): Expression -> Expression -> Expression) 
in 
let let_term_make  = 
((| (x:ExpressionVariable) -> LetExpression.make x
): Expression -> Expression -> Expression -> List Expression -> Expression) 
in 
let letmake  = 
((| (x:ExpressionVariable) -> fun y z -> LetExpression.make x y z []
): Expression -> Expression -> Expression -> Expression) 
in 
(stx_parser "let rec") .>> (
Expression.simpleParser .>>= (fun ident -> 
(parseMany ExpressionVariable.parser) .>>= (fun params ->
(stx_parser "=") .>> (
Expression.parser .>>= (fun exp ->  
(stx_parser "; ;") .>> ( 
ret (LetAction.make(ident,
      Y_operator.make [
	lambdamake ident (
	letmake ident (foldright lambdamake params exp) ident
	)]
))))))))
}

act = { fun (gctx:ref GlobalContext) -> 
(* update declaration_counter *)
let global_context = !gctx in
global_context.increment_declaration_counter();
let var = (|(x:ExpressionVariable) -> x.get_variable()) (this.get_variable()) in 
(* do type inference *)
let ctxt0 = Context.make1 (TypeVariable.idSub) in 
let types = (!this.exp).infer_type(ctxt0) (TypeVariable.next()) in
match types with
| Some ty ->   (* report the type *)
               println ((toString var)^":"^(toString types))  ;
               let ty_closure = (QuantifiedType.closure ty ctxt0) in
               (*evaluate *)
               let eval_exp = (!this.exp).eval() in
               println ((toString var)^"="^(toString eval_exp));
                              let exp_data = ExpressionData.make (eval_exp,(LetStatus.make ""),ty_closure) in 
		              (* update global enbiroment *)
                               let value_ctx = global_context.get_value_context() in
			       value_ctx.envAdd var  (global_context.get_declaration_counter()) (exp_data);
                               global_context.set_value_context value_ctx;
			       gctx = global_context 
| None 	  -> (println "Type Error")
}
  
with ShellAction.parser += | view(LetAction.parser,Parsed ps) -> Parsed ps
and ShellAction.parser += | view(LetAction.recursiveParser,Parsed ps) -> Parsed ps
and toString += | (x:LetAction) -> "\nlet " ^ (toString (x.get_variable()))^" = "^(toString x)
}

