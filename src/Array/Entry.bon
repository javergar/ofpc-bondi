class Entry extends Operator {

static make =  { fun args -> 
	let res = new Entry in
	Expression.make res args
} 

static parser = { (stx_parser "entry") .>>  ret (Entry.make []) }


(*
type_scheme = { |() -> 
  let x = TypeVariable.next() in
  let y = TypeVariable.next() in 
  QuantifiedType.make (x.get_variable(),FunctionType.make (FunctionType.make(x,x), x))
}
*) 

reduce = {  |() -> match this.get_arguments() with 
  | (Cons x (Cons y args)) -> match (x,y) with |(x:Array, y:Integer) ->  Some (Floats.make(x.get_value(y)) args)
  | _ -> None
}


headString = { |() -> "entry" }
with Expression.simpleParser += | view(Entry.parser,Parsed ps) -> Parsed ps

}


