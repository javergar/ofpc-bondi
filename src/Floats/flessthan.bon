class LESSTHAN extends DatumOperator {
static make =  { fun args -> Expression.make (new LESSTHAN) args } 
static parser = { (stx_parser "lessthanfloat") .>>  (ret (LESSTHAN.make []))}
type_scheme = { |() -> 
    FunctionType.make2 (FloatType.make(),FloatType.make(),FloatType.make()) 
}
(* Typing *)
reduce = { |() -> match this.get_arguments() with 
  ((| (Cons x (Cons y args)) -> Some ((Boolean.make ((x.get_float_value()) < (y.get_float_value()))).apply args)
    | _ -> None) : List Expression -> Maybe Expression)
}
(* Printing *)
headString = { |() -> "lessthanfloat" }
with Expression.simpleParser += | view(LESSTHAN.parser,Parsed ps) -> Parsed ps
}

(* Testing *)
let t1 = Expression.parse "lessthanfloat 5.0 5.0";;
t1.eval();;
