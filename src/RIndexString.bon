class RIndexString extends DatumOperator
{	
	static make =  { fun args -> Expression.make (new RIndexString) args } 
	

	static parser = { (stx_parser "RIndexString") .>> ret (RIndexString.make [])}


	(* String -> String *)
	type_scheme = { |() -> 
	  FunctionType.make (StringType.make(),CharType.make())
	}

	reduce = { |() -> match this.get_arguments() with
		((| Cons x (Cons y args) -> match (x,y) with |(x:Strings, y:Chars)-> Some (Integer.make (x.get_string_value() rindexstring y.get_char_value()) args)
		| _ -> None): List Expression -> Maybe Expression)
	}

	(* Printing *)
	headString = { |() -> "RIndexString" }
	with 
	Expression.simpleParser += |view(RIndexString.parser,Parsed ps) -> Parsed ps 

	(* Testing 
	let test = Expression.parse "RIndexString \"abcdeeefg\" 'e'";;
	test.eval();;
	*)
}
